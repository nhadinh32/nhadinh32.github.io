"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readDataFromClipboard = exports.copyDataToClipboard = exports.pasteFromClipboard = exports.copyToClipboard = exports.hasClipboardPermission = exports.isClipboardSupported = void 0;
/**
 * Checks if the Clipboard API is supported in the current browser.
 *
 * @returns {boolean} `true` if the Clipboard API is supported, otherwise `false`.
 */
function isClipboardSupported() {
    return !!navigator.clipboard;
}
exports.isClipboardSupported = isClipboardSupported;
/**
 * Checks if the browser has permission to write to the clipboard.
 *
 * @param {PermissionName} command - The permission name to check (e.g., 'clipboard-write').
 * @returns {Promise<boolean>} A Promise that resolves to `true` if the permission is granted, otherwise `false`.
 */
function hasClipboardPermission(command) {
    return __awaiter(this, void 0, void 0, function () {
        var permissionStatus, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, navigator.permissions.query({ name: command })];
                case 1:
                    permissionStatus = _a.sent();
                    return [2 /*return*/, permissionStatus.state === 'granted'];
                case 2:
                    error_1 = _a.sent();
                    console.error("Error checking ".concat(command, " permission:"), error_1);
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.hasClipboardPermission = hasClipboardPermission;
/**
 * Copies the given text to the clipboard.
 *
 * @param {string} text - The text to be copied to the clipboard.
 * @returns {Promise<boolean>} A Promise that resolves to `true` if the copy operation is successful, otherwise `false`.
 */
function copyToClipboard(text) {
    return __awaiter(this, void 0, void 0, function () {
        var error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, navigator.clipboard.writeText(text)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, true];
                case 2:
                    error_2 = _a.sent();
                    console.error("Error copying to clipboard:", error_2);
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.copyToClipboard = copyToClipboard;
/**
 * Reads text data from the clipboard.
 *
 * @returns {Promise<string | null>} A Promise that resolves to the copied text if successful, otherwise `null`.
 */
function pasteFromClipboard() {
    return __awaiter(this, void 0, void 0, function () {
        var text, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, navigator.clipboard.readText()];
                case 1:
                    text = _a.sent();
                    return [2 /*return*/, text];
                case 2:
                    error_3 = _a.sent();
                    console.error("Error pasting from clipboard:", error_3);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.pasteFromClipboard = pasteFromClipboard;
/**
 * Copies binary data (e.g., Uint8Array) to the clipboard with a specified MIME type.
 *
 * @param {Uint8Array} data - The binary data to be copied to the clipboard.
 * @param {string} mimeType - The MIME type of the data.
 * @returns {Promise<boolean>} A Promise that resolves to `true` if the copy operation is successful, otherwise `false`.
 */
function copyDataToClipboard(data, mimeType) {
    return __awaiter(this, void 0, void 0, function () {
        var blob, error_4;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    blob = new Blob([data], { type: mimeType });
                    return [4 /*yield*/, navigator.clipboard.write([new ClipboardItem((_a = {}, _a[mimeType] = blob, _a))])];
                case 1:
                    _b.sent();
                    return [2 /*return*/, true];
                case 2:
                    error_4 = _b.sent();
                    console.error("Error copying data to clipboard:", error_4);
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.copyDataToClipboard = copyDataToClipboard;
/**
 * Reads binary data (e.g., Uint8Array) from the clipboard with a specified MIME type.
 *
 * @param {string} mimeType - The MIME type of the data to read.
 * @returns {Promise<Uint8Array | null>} A Promise that resolves to the binary data if found, otherwise `null`.
 */
function readDataFromClipboard(mimeType) {
    return __awaiter(this, void 0, void 0, function () {
        var clipboardItems, _i, clipboardItems_1, item, _a, _b, type, blob, arrayBuffer, error_5;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 9, , 10]);
                    return [4 /*yield*/, navigator.clipboard.read()];
                case 1:
                    clipboardItems = _c.sent();
                    _i = 0, clipboardItems_1 = clipboardItems;
                    _c.label = 2;
                case 2:
                    if (!(_i < clipboardItems_1.length)) return [3 /*break*/, 8];
                    item = clipboardItems_1[_i];
                    _a = 0, _b = item.types;
                    _c.label = 3;
                case 3:
                    if (!(_a < _b.length)) return [3 /*break*/, 7];
                    type = _b[_a];
                    if (!(type === mimeType)) return [3 /*break*/, 6];
                    return [4 /*yield*/, item.getType(type)];
                case 4:
                    blob = _c.sent();
                    if (!(blob instanceof Blob)) return [3 /*break*/, 6];
                    return [4 /*yield*/, blob.arrayBuffer()];
                case 5:
                    arrayBuffer = _c.sent();
                    return [2 /*return*/, new Uint8Array(arrayBuffer)];
                case 6:
                    _a++;
                    return [3 /*break*/, 3];
                case 7:
                    _i++;
                    return [3 /*break*/, 2];
                case 8: return [2 /*return*/, null]; // Data with the specified mimeType not found in clipboard
                case 9:
                    error_5 = _c.sent();
                    console.error("Error reading data from clipboard:", error_5);
                    return [2 /*return*/, null];
                case 10: return [2 /*return*/];
            }
        });
    });
}
exports.readDataFromClipboard = readDataFromClipboard;
//# sourceMappingURL=clipboard.min.js.map